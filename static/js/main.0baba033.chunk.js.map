{"version":3,"sources":["api/services/DatabaseService.ts","api/services/DatabaseConfig.ts","utils/publicUrlPath.ts","components/AppLoadingSpinner/style.module.scss","components/AppBaseLayout/style.module.scss","store/store.ts","api/mappers/Dashboard.mapper.ts","api/services/DashboardService.ts","store/slices/dashboard.ts","api/mappers/Event.mapper.ts","api/services/EventsService.ts","store/slices/events.ts","components/AppLoadingSpinner/AppLoadingSpinner.tsx","components/AppHeader/style.module.scss","components/AppHeader/AppHeader.tsx","features/welcome/routes.tsx","features/dashboard/routes.tsx","routes/RootRouter.tsx","components/AppBaseLayout/AppBaseLayout.tsx","App.tsx","index.tsx"],"names":["app","Realm","getMongoDB","mongodb","currentUser","mongoClient","Error","dbName","collectionName","a","limit","collection","db","find","database","login","credentials","apiKey","logIn","getItemById","_id","findOne","getItems","getItemByEventId","event_id","publicUrlPath","path","process","module","exports","store","configureStore","reducer","dashboard","dashboardSlice","events","eventsSlice","useAppDispatch","useDispatch","useAppSelector","useSelector","keyStatisticMapper","dto","studentsCount","key_statistic","students_count","projectsCount","projects_count","teamsCount","teams_count","curatorsCount","curators_count","customersCount","customers_count","customersTopMapper","customers_top","map","item","name","sort","b","slice","typicalTeamMapper","typical_team","role","studentCompetenciesMapper","student_competencies","competence","value","desiredStudentCompetenciesMapper","desired_student_competencies","keyTechnologyStudentsMapper","key_technology_students","keyTechnology","key_technology","studentsByCourseMapper","students_by_course","course","count","customersByActivityMapper","customers_by_activity","activity","customersByAreaMapper","customers_by_area","area","dashboardMapper","keyStatistic","customersTop","typicalTeam","studentCompetencies","desiredStudentCompetencies","keyTechnologyStudents","studentsByCourse","customersByActivity","customersByArea","DB_NAME","COLLECTION","eventID","dashboardAPI","getDashboard","fetchDashboard","createAsyncThunk","eventId","createSlice","initialState","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","selectLoading","selectKeyStatistic","selectCustomersTop","selectTypicalTeam","selectStudentCompetencies","selectDesiredStudentCompetencies","selectKeyTechnologyStudents","selectStudentsByCourse","selectCustomersByActivity","selectCustomersByArea","eventMapper","id","COLLECTION_NAME","items","eventsAPI","fetchEventsList","list","selectEventsList","AppLoadingSpinner","fullHeight","className","cls","style","CircularProgress","color","size","AppHeader","Logo","logo","title","pack","version","to","Welcome","lazy","welcomeRoutes","element","Dashboard","dashboardRoutes","RootRouter","AppBaseLayout","children","section","main","App","routes","useRoutes","useState","auth","setAuth","useEffect","then","catch","error","console","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.0baba033.chunk.js","sourcesContent":["import * as Realm from 'realm-web'\nimport { ObjectId } from 'bson'\n\nimport { DatabaseItemBase } from '../dtos/DatabaseItemBase'\n\nimport {\n  APP_ID,\n  MONGO_CLIENT,\n  PUBLIC_API_KEY,\n} from './DatabaseConfig'\n\nconst app = new Realm.App(APP_ID)\n\nfunction getMongoDB() {\n  const mongodb = app.currentUser?.mongoClient(MONGO_CLIENT)\n\n  if (!mongodb) {\n    throw Error('Database connection error! Unable to create MongoDB Client.')\n  }\n\n  return mongodb\n}\n\nfunction login() {\n  const credentials = Realm.Credentials.apiKey(PUBLIC_API_KEY)\n\n  return app.logIn(credentials, false)\n}\n\n/**\n * Get item from selected db and collection by id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param _id Item id.\n */\nfunction getItemById<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  _id: string | ObjectId,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ _id })\n}\n\n/**\n * Get list of items from selected db and collection.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param limit Max items to return.\n */\nasync function getItems<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  limit = 10,\n): Promise<T[]> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  // TODO (Danil K): Add filters support.\n  return collection.find({}, { limit })\n}\n\n/**\n * Get item from selected db and collection by event id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param event_id Event id.\n */\nexport function getItemByEventId<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  event_id: number,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ event_id })\n}\n\nexport const database = {\n  login,\n  getItemById,\n  getItems,\n  getItemByEventId,\n}\n","export const APP_ID = 'workshop-mongo-qqunb'\n\nexport const PUBLIC_API_KEY = 'A80ekR6X3jZ4vubEuT9oHwVqqBLWRgPCOxQNC4eS63hVG1d31R7wi99wUxNiz5nZ'\n\nexport const MONGO_CLIENT = 'mongodb-atlas'\n","/**\n * This function is workaround for react-router v6 issue: https://github.com/ReactTraining/react-router/issues/7216\n * @param path Path.\n * @returns Modified path with base url.\n */\nexport function publicUrlPath(path: string): string {\n  return process.env.PUBLIC_URL + path\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"style_loading__1qrKv\",\"fullHeight\":\"style_fullHeight__1rlAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"style_main__22q8l\",\"section\":\"style_section__1bgjR\"};","import { configureStore } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nimport { dashboardSlice } from './slices/dashboard'\nimport { eventsSlice } from './slices/events'\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardSlice.reducer,\n    events: eventsSlice.reducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { DashboardModel, KeyStatisticModel, CustomersTopModel, TypicalTeamModel, StudentCompetenciesModel, KeyTechnologyStudentsModel,StudentsByCourseModel, CustomersByActivityModel, CustomersByAreaModel } from 'src/models'\n\nimport { DashboardDto } from '../dtos/statisticDtos/DashboardDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nconst keyStatisticMapper: DtoToModelMapper<KeyStatisticModel, DashboardDto> = {\n  fromDto: (dto: DashboardDto) => ({\n    studentsCount: dto.key_statistic.students_count,\n    projectsCount: dto.key_statistic.projects_count,\n    teamsCount: dto.key_statistic.teams_count,\n    curatorsCount: dto.key_statistic.curators_count,\n    customersCount: dto.key_statistic.customers_count,\n  }),\n}\n\nconst customersTopMapper: DtoToModelMapper<CustomersTopModel[], DashboardDto> = {\n  fromDto: (dto) => dto.customers_top\n    .map((item) => ({\n      name: item.name,\n      projectsCount: item.projects_count,\n    }))\n    .sort((a, b) => a.projectsCount < b.projectsCount ? 1 : -1)\n    .slice(0, 5),\n}\n\n\nconst typicalTeamMapper: DtoToModelMapper<TypicalTeamModel[], DashboardDto> = {\n  fromDto: (dto) => dto.typical_team.map((item) => ({\n    role: item.role,\n    studentsCount: item.students_count,\n  })),\n}\n\nconst studentCompetenciesMapper: DtoToModelMapper<StudentCompetenciesModel[], DashboardDto> = {\n  fromDto:  (dto) => dto.student_competencies\n    .map((item) => ({\n      competence: item.competence,\n      value: item.value,\n    }))\n    .sort((a, b) => a.value < b.value ? 1 : -1)\n    .slice(0, 8),\n}\n\nconst desiredStudentCompetenciesMapper: DtoToModelMapper<StudentCompetenciesModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.desired_student_competencies\n    .map((item) => ({\n      competence: item.competence,\n      value: item.value,\n    }))\n    .sort((a, b) => a.value < b.value ? 1 : -1)\n    .slice(0, 8),\n}\n\nconst keyTechnologyStudentsMapper: DtoToModelMapper<KeyTechnologyStudentsModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.key_technology_students.map((item) => ({\n    keyTechnology: item.key_technology,\n    value: item.value,\n  })),\n}\n\nconst studentsByCourseMapper: DtoToModelMapper<StudentsByCourseModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.students_by_course.map((item) => ({\n    course: item.course,\n    count: item.count,\n  })),\n}\n\nconst customersByActivityMapper: DtoToModelMapper<CustomersByActivityModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.customers_by_activity.map((item) => ({\n    activity: item.activity,\n    count: item.count,\n  })),\n}\n\nconst customersByAreaMapper:DtoToModelMapper<CustomersByAreaModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.customers_by_area.map((item) => ({\n    area: item.area,\n    count: item.count,\n  })),\n}\n\nexport const dashboardMapper: DtoToModelMapper<DashboardModel, DashboardDto> = {\n  fromDto: (dto) => ({\n    keyStatistic: keyStatisticMapper.fromDto(dto),\n    customersTop: customersTopMapper.fromDto(dto),\n    typicalTeam: typicalTeamMapper.fromDto(dto),\n    studentCompetencies: studentCompetenciesMapper.fromDto(dto),\n    desiredStudentCompetencies: desiredStudentCompetenciesMapper.fromDto(dto),\n    keyTechnologyStudents: keyTechnologyStudentsMapper.fromDto(dto),\n    studentsByCourse: studentsByCourseMapper.fromDto(dto),\n    customersByActivity: customersByActivityMapper.fromDto(dto),\n    customersByArea: customersByAreaMapper.fromDto(dto),\n  }),\n}\n","import { DashboardDto } from '../dtos/statisticDtos/DashboardDto'\nimport { dashboardMapper } from '../mappers/Dashboard.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'statistics'\nconst COLLECTION = 'dashboard'\n\nasync function getDashboard(eventID: number) {\n  const item = await database\n    .getItemByEventId<DashboardDto>(DB_NAME, COLLECTION, eventID)\n\n  if (!item) {\n    return null\n  }\n  return  dashboardMapper.fromDto(item)\n}\n\nexport const dashboardAPI = { getDashboard }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { dashboardAPI } from 'src/api/services/DashboardService'\nimport {\n  CustomersByActivityModel,\n  CustomersByAreaModel,\n  CustomersTopModel,\n  KeyStatisticModel,\n  KeyTechnologyStudentsModel,\n  StudentCompetenciesModel,\n  StudentsByCourseModel,\n  TypicalTeamModel,\n} from 'src/models'\n\nimport { RootState } from '../store'\n\n\nexport const fetchDashboard = createAsyncThunk(\n  'dashboard/fetchDashboard',\n  (eventId: number) => dashboardAPI.getDashboard(eventId),\n)\n\ninterface DashboardState {\n  loading: boolean\n  keyStatistic: KeyStatisticModel | null\n  customersTop: CustomersTopModel[] | null\n  typicalTeam: TypicalTeamModel[] | null\n  studentCompetencies: StudentCompetenciesModel[] | null\n  desiredStudentCompetencies: StudentCompetenciesModel[] | null\n  keyTechnologyStudents: KeyTechnologyStudentsModel[] | null\n  studentsByCourse: StudentsByCourseModel[] | null\n  customersByActivity: CustomersByActivityModel[] | null\n  customersByArea: CustomersByAreaModel[] | null\n}\n\nconst initialState: DashboardState = {\n  loading: true,\n  keyStatistic: null,\n  customersTop: null,\n  typicalTeam: null,\n  studentCompetencies: null,\n  desiredStudentCompetencies: null,\n  keyTechnologyStudents: null,\n  studentsByCourse: null,\n  customersByActivity: null,\n  customersByArea: null,\n}\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchDashboard.pending, (state) => {\n      state.loading = true\n    })\n    .addCase(fetchDashboard.fulfilled, (state, action) => {\n      state.keyStatistic = action.payload?.keyStatistic ?? null\n      state.customersTop = action.payload?.customersTop ?? null\n      state.typicalTeam = action.payload?.typicalTeam ?? null\n      state.studentCompetencies = action.payload?.studentCompetencies ?? null\n      state.desiredStudentCompetencies = action.payload?.desiredStudentCompetencies ?? null\n      state.keyTechnologyStudents = action.payload?.keyTechnologyStudents ?? null\n      state.studentsByCourse = action.payload?.studentsByCourse ?? null\n      state.customersByActivity = action.payload?.customersByActivity ?? null\n      state.customersByArea = action.payload?.customersByArea ?? null\n      state.loading = false\n    }),\n})\n\nconst selectLoading = (state: RootState) => state.dashboard.loading\nconst selectKeyStatistic = (state: RootState) => state.dashboard.keyStatistic\nconst selectCustomersTop = (state: RootState) => state.dashboard.customersTop\nconst selectTypicalTeam = (state: RootState) => state.dashboard.typicalTeam\nconst selectStudentCompetencies = (state: RootState) => state.dashboard.studentCompetencies\nconst selectDesiredStudentCompetencies = (state: RootState) => state.dashboard.desiredStudentCompetencies\nconst selectKeyTechnologyStudents = (state: RootState) => state.dashboard.keyTechnologyStudents\nconst selectStudentsByCourse = (state: RootState) => state.dashboard.studentsByCourse\nconst selectCustomersByActivity = (state: RootState) => state.dashboard.customersByActivity\nconst selectCustomersByArea = (state: RootState) => state.dashboard.customersByArea\n\nexport {\n  dashboardSlice,\n  selectLoading,\n  selectKeyStatistic,\n  selectCustomersTop,\n  selectTypicalTeam,\n  selectStudentCompetencies,\n  selectDesiredStudentCompetencies,\n  selectKeyTechnologyStudents,\n  selectStudentsByCourse,\n  selectCustomersByActivity,\n  selectCustomersByArea,\n}\n","import { EventModel } from 'src/models'\n\nimport { EventDto } from '../dtos/EventDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nexport const eventMapper: DtoToModelMapper<EventModel, EventDto> = {\n  fromDto: (dto) => ({\n    id: dto.id,\n    name: dto.name,\n  }),\n}\n","import { EventDto } from '../dtos/EventDto'\nimport { eventMapper } from '../mappers/Event.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'events'\nconst COLLECTION_NAME = 'list'\n\nasync function getEventsList() {\n  const items = await database.getItems<EventDto>(DB_NAME, COLLECTION_NAME)\n\n  return items.map(item => eventMapper.fromDto(item))\n}\n\nexport const eventsAPI = { getEventsList }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { eventsAPI } from 'src/api/services/EventsService'\nimport { EventModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchEventsList = createAsyncThunk(\n  'events/fetchEventsList',\n  eventsAPI.getEventsList,\n)\n\n\ninterface EventsState {\n  list: EventModel[]\n}\n\nconst initialState: EventsState = { list: [] }\n\nexport const eventsSlice = createSlice({\n  name: 'events',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchEventsList.fulfilled, (state, action) => {\n      state.list = action.payload\n    }),\n})\n\nexport const selectEventsList = (state: RootState) => state.events.list\n","import React from 'react'\nimport { CircularProgress } from '@material-ui/core'\nimport cls from 'classnames'\n\nimport style from './style.module.scss'\n\ninterface Props {\n  fullHeight?: boolean\n}\n\nexport const AppLoadingSpinner: React.FC<Props> = ({ fullHeight }) => (\n  <div className={cls(style.loading, { [style.fullHeight]: fullHeight })}>\n    <CircularProgress\n      color='primary'\n      style={{ color: 'var(--primary)' }}\n      size={50}\n    />\n  </div>\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"style_logo__3hEVD\"};","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\nimport pack from '../../../package.json'\n\nimport style from './style.module.scss'\n\nexport const AppHeader: React.FC = () => (\n  <header>\n    <Logo />\n    <h3>\n      Визуализации\n    </h3>\n  </header>\n)\n\nconst Logo: React.FC = () => (\n  <div\n    className={style.logo}\n    title={`Версия системы ${pack.version}`}\n  >\n    <Link to={publicUrlPath('/')} />\n  </div>\n)\n","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Welcome = lazy(() => import('./pages/Welcome'))\n\nexport const welcomeRoutes: PartialRouteObject[] = [\n  {\n    path: 'welcome',\n    element: <Welcome />,\n  },\n]\n","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Dashboard = lazy(() => import('./pages/Dashboard'))\n\nexport const dashboardRoutes: PartialRouteObject[] = [\n  {\n    path: 'dashboard/event/:id',\n    element: <Dashboard />,\n  },\n]\n","import { PartialRouteObject } from 'react-router'\nimport { Navigate } from 'react-router-dom'\nimport { welcomeRoutes } from 'src/features/welcome/routes'\nimport { dashboardRoutes } from 'src/features/dashboard/routes'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\n\nexport const RootRouter: PartialRouteObject[] = [\n  ...welcomeRoutes,\n  ...dashboardRoutes,\n  {\n    path: '/',\n    element: <Navigate to={publicUrlPath('/welcome')} />,\n  },\n  {\n    path: '*',\n    element: <div>404 page</div>,\n  },\n]\n","import React from 'react'\n\nimport style from './style.module.scss'\n\nexport const AppBaseLayout: React.FC = ({ children }) => (\n  <section className={style.section}>\n    <div className={style.main}>\n      {children}\n    </div>\n  </section>\n)\n","import React, { useEffect, useState } from 'react'\nimport { useRoutes } from 'react-router-dom'\n\nimport { database } from './api/services/DatabaseService'\nimport { AppHeader } from './components/AppHeader'\nimport { AppLoadingSpinner } from './components/AppLoadingSpinner'\nimport { RootRouter } from './routes'\nimport { AppBaseLayout } from './components/AppBaseLayout'\n\nexport const App: React.FC = () => {\n  const routes = useRoutes(RootRouter, process.env.PUBLIC_URL)\n\n  const [auth, setAuth] = useState(false)\n\n  useEffect(() => {\n    database.login()\n      .then(() => setAuth(true))\n      .catch((error) => console.error('Database connection error', error))\n  }, [])\n\n  if (!auth) {\n    return (\n      <>\n        <AppHeader />\n        <AppLoadingSpinner fullHeight />\n      </>)\n  }\n\n  return (\n    <>\n      <AppHeader />\n      <AppBaseLayout>\n        {routes}\n      </AppBaseLayout>\n    </>\n  )\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from 'src/App'\n\nimport { store } from './store'\n\nimport './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Suspense fallback={<div>Загрузка...</div>}>\n          <App />\n        </Suspense>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}