{"version":3,"sources":["api/services/DatabaseService.ts","api/services/DatabaseConfig.ts","api/mappers/Event.mapper.ts","api/services/EventsService.ts","store/slices/events.ts","store/store.ts","utils/publicUrlPath.ts","components/AppLoadingSpinner/AppLoadingSpinner.tsx","components/AppLoadingSpinner/style.module.scss","api/mappers/Dashboard.mapper.ts","api/services/DashboardService.ts","store/slices/dashboard.ts","api/mappers/Diagrams.mapper.ts","api/services/DiagramsService.ts","store/slices/diagrams.ts","components/AppHeader/style.module.scss","features/welcome/routes.tsx","features/statistic/routes.tsx","routes/RootRouter.tsx","App.tsx","components/AppHeader/AppHeader.tsx","index.tsx"],"names":["app","Realm","getMongoDB","mongodb","currentUser","mongoClient","Error","dbName","collectionName","a","limit","collection","db","find","database","login","credentials","apiKey","logIn","getItemById","_id","findOne","getItems","getItemByEventId","event_id","eventMapper","dto","id","name","description","startDate","start_date","toLocaleString","year","month","endDate","end_date","DB_NAME","COLLECTION_NAME","items","map","item","eventsAPI","fetchEventsList","createAsyncThunk","eventsSlice","createSlice","initialState","list","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectEventsList","events","store","configureStore","reducer","dashboard","dashboardSlice","diagrams","diagramsSlice","useAppDispatch","useDispatch","useAppSelector","useSelector","publicUrlPath","path","process","AppLoadingSpinner","fullHeight","className","cls","style","loading","CircularProgress","color","size","module","exports","keyStatisticMapper","studentsCount","key_statistic","students_count","projectsCount","projects_count","teamsCount","teams_count","curatorsCount","curators_count","customersCount","customers_count","customersTopMapper","customers_top","sort","b","slice","typicalTeamMapper","typical_team","role","studentCompetenciesMapper","student_competencies","competence","value","desiredStudentCompetenciesMapper","desired_student_competencies","keyTechnologyStudentsMapper","key_technology_students","keyTechnology","key_technology","studentsByCourseMapper","students_by_course","course","count","customersByActivityMapper","customers_by_activity","activity","customersByAreaMapper","customers_by_area","area","dashboardMapper","keyStatistic","customersTop","typicalTeam","studentCompetencies","desiredStudentCompetencies","keyTechnologyStudents","studentsByCourse","customersByActivity","customersByArea","COLLECTION","eventID","dashboardAPI","getDashboard","fetchDashboard","eventId","data","pending","selectLoading","selectDashboardData","lifeScenarioProjectsMapper","life_scenario_projects","professionalValue","professional_value","entrepreneurialValue","entrepreneurial_value","scientificValue","scientific_value","lifeScenarioStudentsMapper","life_scenario_students","projectCompetenciesMapper","project_competencies","competency","competencyType","competency_type","keyTechnologyCustomersMapper","nodes","key_technology_customers","edges","keyTechnologyCuratorsMapper","key_technology_curators","diagramsMapper","lifeScenarioProjects","lifeScenarioStudents","projectCompetencies","keyTechnologyCustomers","keyTechnologyCurators","diagramsAPI","getDiagrams","fetchDiagrams","selectDiagramsData","Welcome","lazy","welcomeRoutes","element","Statistic","Dashboard","Diagrams","statisticRoutes","children","RootRouter","to","App","routes","useRoutes","useState","auth","setAuth","useEffect","then","catch","error","console","dispatch","AppHeader","Logo","logo","title","pack","version","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.0eb0432e.chunk.js","sourcesContent":["import * as Realm from 'realm-web'\nimport { ObjectId } from 'bson'\n\nimport { DatabaseItemBase } from '../dtos/DatabaseItemBase'\n\nimport {\n  APP_ID,\n  MONGO_CLIENT,\n  PUBLIC_API_KEY,\n} from './DatabaseConfig'\n\nconst app = new Realm.App(APP_ID)\n\nfunction getMongoDB() {\n  const mongodb = app.currentUser?.mongoClient(MONGO_CLIENT)\n\n  if (!mongodb) {\n    throw Error('Database connection error! Unable to create MongoDB Client.')\n  }\n\n  return mongodb\n}\n\nfunction login() {\n  const credentials = Realm.Credentials.apiKey(PUBLIC_API_KEY)\n\n  return app.logIn(credentials, false)\n}\n\n/**\n * Get item from selected db and collection by id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param _id Item id.\n */\nfunction getItemById<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  _id: string | ObjectId,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ _id })\n}\n\n/**\n * Get list of items from selected db and collection.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param limit Max items to return.\n */\nasync function getItems<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  limit = 10,\n): Promise<T[]> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  // TODO (Danil K): Add filters support.\n  return collection.find({}, { limit })\n}\n\n/**\n * Get item from selected db and collection by event id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param event_id Event id.\n */\nexport function getItemByEventId<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  event_id: number,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ event_id })\n}\n\nexport const database = {\n  login,\n  getItemById,\n  getItems,\n  getItemByEventId,\n}\n","export const APP_ID = 'workshop-mongo-qqunb'\n\nexport const PUBLIC_API_KEY = 'A80ekR6X3jZ4vubEuT9oHwVqqBLWRgPCOxQNC4eS63hVG1d31R7wi99wUxNiz5nZ'\n\nexport const MONGO_CLIENT = 'mongodb-atlas'\n","import { EventModel } from 'src/models'\n\nimport { EventDto } from '../dtos/EventDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nexport const eventMapper: DtoToModelMapper<EventModel, EventDto> = {\n  fromDto: (dto) => ({\n    id: dto.id,\n    name: dto.name,\n    description: dto.description,\n    startDate: dto.start_date.toLocaleString('ru-RU', {\n      year: 'numeric',\n      month: 'long',\n    }),\n    endDate: dto.end_date.toLocaleString('ru-RU', {\n      year: 'numeric',\n      month: 'long',\n    }),\n  }),\n}\n","import { EventDto } from '../dtos/EventDto'\nimport { eventMapper } from '../mappers/Event.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'events'\nconst COLLECTION_NAME = 'list'\n\nasync function getEventsList() {\n  const items = await database.getItems<EventDto>(DB_NAME, COLLECTION_NAME)\n\n  return items.map(item => eventMapper.fromDto(item))\n}\n\nexport const eventsAPI = { getEventsList }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { eventsAPI } from 'src/api/services/EventsService'\nimport { EventModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchEventsList = createAsyncThunk(\n  'events/fetchEventsList',\n  eventsAPI.getEventsList,\n)\n\n\ninterface EventsState {\n  list: EventModel[]\n}\n\nconst initialState: EventsState = { list: [] }\n\nexport const eventsSlice = createSlice({\n  name: 'events',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchEventsList.fulfilled, (state, action) => {\n      state.list = action.payload\n    }),\n})\n\nexport const selectEventsList = (state: RootState) => state.events.list\n","import { configureStore } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nimport { dashboardSlice } from './slices/dashboard'\nimport { eventsSlice } from './slices/events'\nimport { diagramsSlice } from './slices/diagrams'\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardSlice.reducer,\n    diagrams: diagramsSlice.reducer,\n    events: eventsSlice.reducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","/**\n * This function is workaround for react-router v6 issue: https://github.com/ReactTraining/react-router/issues/7216\n * @param path Path.\n * @returns Modified path with base url.\n */\nexport function publicUrlPath(path: string): string {\n  return process.env.PUBLIC_URL + path\n}\n","import React from 'react'\nimport { CircularProgress } from '@material-ui/core'\nimport cls from 'classnames'\n\nimport style from './style.module.scss'\n\ninterface Props {\n  fullHeight?: boolean\n}\n\nexport const AppLoadingSpinner: React.FC<Props> = ({ fullHeight }) => (\n  <div className={cls(style.loading, { [style.fullHeight]: fullHeight })}>\n    <CircularProgress\n      color='primary'\n      style={{ color: 'var(--primary)' }}\n      size={50}\n    />\n  </div>\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"style_loading__1qrKv\",\"fullHeight\":\"style_fullHeight__1rlAE\"};","import { DashboardModel, KeyStatisticModel, CustomersTopModel, TypicalTeamModel, StudentCompetenciesModel, KeyTechnologyStudentsModel,StudentsByCourseModel, CustomersByActivityModel, CustomersByAreaModel } from 'src/models'\n\nimport { DashboardDto } from '../dtos/dashboardDtos/DashboardDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nconst keyStatisticMapper: DtoToModelMapper<KeyStatisticModel, DashboardDto> = {\n  fromDto: (dto: DashboardDto) => ({\n    studentsCount: dto.key_statistic.students_count,\n    projectsCount: dto.key_statistic.projects_count,\n    teamsCount: dto.key_statistic.teams_count,\n    curatorsCount: dto.key_statistic.curators_count,\n    customersCount: dto.key_statistic.customers_count,\n  }),\n}\n\nconst customersTopMapper: DtoToModelMapper<CustomersTopModel[], DashboardDto> = {\n  fromDto: (dto) => dto.customers_top\n    .map((item) => ({\n      name: item.name,\n      projectsCount: item.projects_count,\n    }))\n    .sort((a, b) => a.projectsCount < b.projectsCount ? 1 : -1)\n    .slice(0, 5),\n}\n\n\nconst typicalTeamMapper: DtoToModelMapper<TypicalTeamModel[], DashboardDto> = {\n  fromDto: (dto) => dto.typical_team.map((item) => ({\n    role: item.role,\n    studentsCount: item.students_count,\n  })),\n}\n\nconst studentCompetenciesMapper: DtoToModelMapper<StudentCompetenciesModel[], DashboardDto> = {\n  fromDto:  (dto) => dto.student_competencies\n    .map((item) => ({\n      competence: item.competence,\n      value: item.value,\n    }))\n    .sort((a, b) => a.value < b.value ? 1 : -1)\n    .slice(0, 8),\n}\n\nconst desiredStudentCompetenciesMapper: DtoToModelMapper<StudentCompetenciesModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.desired_student_competencies\n    .map((item) => ({\n      competence: item.competence,\n      value: item.value,\n    }))\n    .sort((a, b) => a.value < b.value ? 1 : -1)\n    .slice(0, 8),\n}\n\nconst keyTechnologyStudentsMapper: DtoToModelMapper<KeyTechnologyStudentsModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.key_technology_students.map((item) => ({\n    keyTechnology: item.key_technology,\n    value: item.value,\n  })),\n}\n\nconst studentsByCourseMapper: DtoToModelMapper<StudentsByCourseModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.students_by_course.map((item) => ({\n    course: item.course,\n    count: item.count,\n  })),\n}\n\nconst customersByActivityMapper: DtoToModelMapper<CustomersByActivityModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.customers_by_activity.map((item) => ({\n    activity: item.activity,\n    count: item.count,\n  })),\n}\n\nconst customersByAreaMapper:DtoToModelMapper<CustomersByAreaModel[], DashboardDto> = {\n  fromDto: (dto: DashboardDto) => dto.customers_by_area.map((item) => ({\n    area: item.area,\n    count: item.count,\n  })),\n}\n\nexport const dashboardMapper: DtoToModelMapper<DashboardModel, DashboardDto> = {\n  fromDto: (dto) => ({\n    keyStatistic: keyStatisticMapper.fromDto(dto),\n    customersTop: customersTopMapper.fromDto(dto),\n    typicalTeam: typicalTeamMapper.fromDto(dto),\n    studentCompetencies: studentCompetenciesMapper.fromDto(dto),\n    desiredStudentCompetencies: desiredStudentCompetenciesMapper.fromDto(dto),\n    keyTechnologyStudents: keyTechnologyStudentsMapper.fromDto(dto),\n    studentsByCourse: studentsByCourseMapper.fromDto(dto),\n    customersByActivity: customersByActivityMapper.fromDto(dto),\n    customersByArea: customersByAreaMapper.fromDto(dto),\n  }),\n}\n","import { DashboardDto } from '../dtos/dashboardDtos/DashboardDto'\nimport { dashboardMapper } from '../mappers/Dashboard.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'statistics'\nconst COLLECTION = 'dashboard'\n\nasync function getDashboard(eventID: number) {\n  const item = await database\n    .getItemByEventId<DashboardDto>(DB_NAME, COLLECTION, eventID)\n\n  if (!item) {\n    return null\n  }\n  return dashboardMapper.fromDto(item)\n}\n\nexport const dashboardAPI = { getDashboard }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { dashboardAPI } from 'src/api/services/DashboardService'\nimport { DashboardModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchDashboard = createAsyncThunk(\n  'dashboard/fetch',\n  async (eventId: number) => {\n    const dashboard = await dashboardAPI.getDashboard(eventId)\n\n    return {\n      eventId,\n      dashboard,\n    }\n  },\n)\n\ninterface DashboardState {\n  loading: boolean\n  data: Record<number, PartialNull<DashboardModel>>\n}\n\nconst initialState: DashboardState = {\n  loading: true,\n  data: {},\n}\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchDashboard.pending, (state) => {\n      state.loading = true\n    })\n    .addCase(fetchDashboard.fulfilled, (state, action) => {\n      const { eventId, dashboard } = action.payload\n\n      if (dashboard) {\n        state.data[eventId] = dashboard\n      }\n\n      state.loading = false\n    }),\n})\n\nconst selectLoading = (state: RootState) => state.dashboard.loading\nconst selectDashboardData = (eventId: number) => (state: RootState) => state.dashboard.data[eventId]\n\nexport {\n  dashboardSlice,\n  selectLoading,\n  selectDashboardData,\n}\n","import { DiagramsModel, CompetenciesModel, LifeScenarioModel, KeyTechnologyModel } from 'src/models'\n\nimport { DiagramsDto } from '../dtos/diagramsDto/DiagramsDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nconst lifeScenarioProjectsMapper: DtoToModelMapper<LifeScenarioModel[], DiagramsDto> = {\n  fromDto: (dto) => dto.life_scenario_projects\n    .map((item) => ({\n      keyTechnology: item.key_technology,\n      professionalValue: item.professional_value,\n      entrepreneurialValue: item.entrepreneurial_value,\n      scientificValue: item.scientific_value,\n    })),\n}\n\nconst lifeScenarioStudentsMapper: DtoToModelMapper<LifeScenarioModel[], DiagramsDto> = {\n  fromDto: (dto) => dto.life_scenario_students\n    .map((item) => ({\n      keyTechnology: item.key_technology,\n      professionalValue: item.professional_value,\n      entrepreneurialValue: item.entrepreneurial_value,\n      scientificValue: item.scientific_value,\n    })),\n}\n\nconst projectCompetenciesMapper: DtoToModelMapper<CompetenciesModel[], DiagramsDto> = {\n  fromDto: (dto) => dto.project_competencies\n    .map((item) => ({\n      competency: item.competency,\n      competencyType: item.competency_type,\n      value: item.value,\n    })),\n}\n\nconst studentCompetenciesMapper: DtoToModelMapper<CompetenciesModel[], DiagramsDto> = {\n  fromDto: (dto) => dto.student_competencies\n    .map((item) => ({\n      competency: item.competency,\n      competencyType: item.competency_type,\n      value: item.value,\n    })),\n}\n\nconst keyTechnologyCustomersMapper: DtoToModelMapper<KeyTechnologyModel, DiagramsDto> = {\n  fromDto: (dto) => ({\n    nodes: dto.key_technology_customers.nodes,\n    edges: dto.key_technology_customers.edges,\n  }),\n}\n\nconst keyTechnologyCuratorsMapper: DtoToModelMapper<KeyTechnologyModel, DiagramsDto> = {\n  fromDto: (dto) => ({\n    nodes: dto.key_technology_curators.nodes,\n    edges: dto.key_technology_curators.edges,\n  }),\n}\n\nexport const diagramsMapper: DtoToModelMapper<DiagramsModel, DiagramsDto> = {\n  fromDto: (dto) => ({\n    lifeScenarioProjects: lifeScenarioProjectsMapper.fromDto(dto),\n    lifeScenarioStudents: lifeScenarioStudentsMapper.fromDto(dto),\n    projectCompetencies: projectCompetenciesMapper.fromDto(dto),\n    studentCompetencies: studentCompetenciesMapper.fromDto(dto),\n    keyTechnologyCustomers: keyTechnologyCustomersMapper.fromDto(dto),\n    keyTechnologyCurators: keyTechnologyCuratorsMapper.fromDto(dto),\n  }),\n}\n","import { DiagramsDto } from '../dtos/diagramsDto/DiagramsDto'\nimport { diagramsMapper } from '../mappers/Diagrams.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'statistics'\nconst COLLECTION = 'diagrams'\n\nasync function getDiagrams(eventID: number) {\n  const item = await database\n    .getItemByEventId<DiagramsDto>(DB_NAME, COLLECTION, eventID)\n\n  if (!item) {\n    return null\n  }\n  return diagramsMapper.fromDto(item)\n}\n\nexport const diagramsAPI = { getDiagrams }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { diagramsAPI } from 'src/api/services/DiagramsService'\nimport { DiagramsModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchDiagrams = createAsyncThunk(\n  'diagrams/fetch',\n  async (eventId: number) => {\n    const diagrams = await diagramsAPI.getDiagrams(eventId)\n\n    return {\n      eventId,\n      diagrams,\n    }\n  },\n)\n\ninterface DiagramsState {\n  loading: boolean\n  data: Record<number, PartialNull<DiagramsModel>>\n}\n\nconst initialState: DiagramsState = {\n  loading: true,\n  data: {},\n}\n\nconst diagramsSlice = createSlice({\n  name: 'diagrams',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchDiagrams.pending, (state) => {\n      state.loading = true\n    })\n    .addCase(fetchDiagrams.fulfilled, (state, action) => {\n      const { eventId, diagrams } = action.payload\n\n      if (diagrams) {\n        state.data[eventId] = diagrams\n      }\n\n      state.loading = false\n    }),\n})\n\nconst selectLoading = (state: RootState) => state.diagrams.loading\nconst selectDiagramsData = (eventId: number) => (state: RootState) => state.diagrams.data[eventId]\n\nexport {\n  diagramsSlice,\n  selectLoading,\n  selectDiagramsData,\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"style_logo__3hEVD\"};","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Welcome = lazy(() => import('./pages/Welcome'))\n\nexport const welcomeRoutes: PartialRouteObject[] = [\n  {\n    path: '',\n    element: <Welcome />,\n  },\n]\n","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Statistic = lazy(() => import('./pages/Statistic'))\nconst Dashboard = lazy(() => import('../dashboard/pages/Dashboard'))\nconst Diagrams = lazy(() => import('../diagrams/pages/Diagrams'))\n\nexport const statisticRoutes: PartialRouteObject[] = [\n  {\n    path: 'event/:id',\n    element: <Statistic />,\n    children: [\n      {\n        path: '/dashboard',\n        element: <Dashboard />,\n      },\n      {\n        path: '/diagrams',\n        element: <Diagrams />,\n      },\n    ],\n  },\n]\n","import { Outlet, PartialRouteObject } from 'react-router'\nimport { welcomeRoutes } from 'src/features/welcome/routes'\nimport { statisticRoutes } from 'src/features/statistic/routes'\nimport { Navigate } from 'react-router-dom'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\nexport const RootRouter: PartialRouteObject[] = [\n  {\n    path: '/',\n    children: [\n      ...welcomeRoutes,\n      ...statisticRoutes,\n    ],\n    element: <Outlet />,\n  },\n  {\n    path: '*',\n    element: <Navigate to={publicUrlPath('/')} />,\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport { useRoutes } from 'react-router-dom'\n\nimport { database } from './api/services/DatabaseService'\nimport { AppLoadingSpinner } from './components/AppLoadingSpinner'\nimport { RootRouter } from './routes'\nimport { useAppDispatch } from './store'\nimport { fetchEventsList } from './store/slices/events'\n\nexport const App: React.FC = () => {\n  const routes = useRoutes(RootRouter, process.env.PUBLIC_URL)\n\n  const [auth, setAuth] = useState(false)\n\n  useEffect(() => {\n    database.login()\n      .then(() => setAuth(true))\n      .catch((error) => console.error('Database connection error', error))\n  }, [])\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (auth) {\n      dispatch(fetchEventsList())\n    }\n  }, [auth])\n\n  if (!auth) {\n    return <AppLoadingSpinner fullHeight />\n  }\n\n  return (\n    <>\n      {routes}\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\nimport pack from '../../../package.json'\n\nimport style from './style.module.scss'\n\nexport const AppHeader: React.FC = () => (\n  <header>\n    <Logo />\n  </header>\n)\n\nconst Logo: React.FC = () => (\n  <div\n    className={style.logo}\n    title={`Версия системы ${pack.version}`}\n  >\n    <Link to={publicUrlPath('/')} />\n  </div>\n)\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from 'src/App'\n\nimport { AppHeader } from './components/AppHeader'\nimport { AppLoadingSpinner } from './components/AppLoadingSpinner'\nimport { store } from './store'\n\nimport './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <AppHeader />\n        <Suspense fallback={<AppLoadingSpinner fullHeight />}>\n          <App />\n        </Suspense>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}