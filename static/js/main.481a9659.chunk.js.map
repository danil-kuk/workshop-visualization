{"version":3,"sources":["api/services/DatabaseService.ts","api/services/DatabaseConfig.ts","store/store.ts","utils/publicUrlPath.ts","store/index.ts","store/slices/counterSlice.ts","api/mappers/KeyStatistic.mapper.ts","api/services/DashboardService.ts","store/slices/dashboard.ts","features/welcome/routes.tsx","routes/RootRouter.tsx","App.tsx","index.tsx"],"names":["app","Realm","getMongoDB","mongodb","currentUser","mongoClient","Error","dbName","collectionName","a","limit","collection","db","find","database","login","credentials","apiKey","logIn","getItemById","_id","findOne","getItems","store","configureStore","reducer","counter","counterSlice","dashboard","dashboardSlice","useAppDispatch","useDispatch","useAppSelector","useSelector","publicUrlPath","path","process","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","keyStatisticMapper","dto","studentsCount","students_count","projectsCount","projects_count","teamsCount","teams_count","curatorsCount","curators_count","customersCount","customers_count","DB_NAME","KEY_STAT_COLLECTION","testId","ObjectId","createFromHexString","item","dashboardAPI","fetchKeyStatistic","createAsyncThunk","keyStatistic","extraReducers","builder","addCase","fulfilled","selectKeyStatistic","Welcome","lazy","Counter","welcomeRoutes","element","children","RootRouter","to","App","routes","useRoutes","useState","auth","setAuth","useEffect","then","catch","error","console","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.481a9659.chunk.js","sourcesContent":["import * as Realm from 'realm-web'\nimport { ObjectId } from 'bson'\n\nimport { DatabaseItemBase } from '../dtos/DatabaseItemBase'\n\nimport {\n  APP_ID,\n  MONGO_CLIENT,\n  PUBLIC_API_KEY,\n} from './DatabaseConfig'\n\nconst app = new Realm.App(APP_ID)\n\nfunction getMongoDB() {\n  const mongodb = app.currentUser?.mongoClient(MONGO_CLIENT)\n\n  if (!mongodb) {\n    throw Error('Database connection error! Unable to create MongoDB Client.')\n  }\n\n  return mongodb\n}\n\nfunction login() {\n  const credentials = Realm.Credentials.apiKey(PUBLIC_API_KEY)\n\n  return app.logIn(credentials, false)\n}\n\n/**\n * Get item from selected db and collection by id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param _id Item id.\n */\nfunction getItemById<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  _id: string | ObjectId,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ _id })\n}\n\n/**\n * Get list of items from selected db and collection.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param limit Max items to return.\n */\nasync function getItems<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  limit = 10,\n): Promise<T[]> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  // TODO (Danil K): Add filters support.\n  return collection.find({}, { limit })\n}\n\nexport const database = {\n  login,\n  getItemById,\n  getItems,\n}\n","export const APP_ID = 'workshop-mongo-qqunb'\n\nexport const PUBLIC_API_KEY = 'A80ekR6X3jZ4vubEuT9oHwVqqBLWRgPCOxQNC4eS63hVG1d31R7wi99wUxNiz5nZ'\n\nexport const MONGO_CLIENT = 'mongodb-atlas'\n","import { configureStore } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nimport { counterSlice } from './slices/counterSlice'\nimport { dashboardSlice } from './slices/dashboard'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    dashboard: dashboardSlice.reducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","/**\n * This function is workaround for react-router v6 issue: https://github.com/ReactTraining/react-router/issues/7216\n * @param path Path.\n * @returns Modified path with base url.\n */\nexport function publicUrlPath(path: string): string {\n  return process.env.PUBLIC_URL + path\n}\n","export * from './store'\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { RootState } from '../store'\n\ninterface CounterState {\n  value: number\n}\n\nconst initialState: CounterState = { value: 0 }\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport const selectCount = (state: RootState) => state.counter.value\n","import { KeyStatisticModel } from 'src/models'\n\nimport { KeyStatisticDto } from '../dtos/KeyStatisticDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nexport const keyStatisticMapper: DtoToModelMapper<KeyStatisticModel, KeyStatisticDto> = {\n  fromDto: (dto) => ({\n    studentsCount: dto.students_count,\n    projectsCount: dto.projects_count,\n    teamsCount: dto.teams_count,\n    curatorsCount: dto.curators_count,\n    customersCount: dto.customers_count,\n  }),\n}\n","import { ObjectId } from 'bson'\n\nimport { KeyStatisticDto } from '../dtos/KeyStatisticDto'\nimport { keyStatisticMapper } from '../mappers/KeyStatistic.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'dashboard'\nconst KEY_STAT_COLLECTION = 'keyStatistic'\n\nasync function getKeyStatistic() {\n  // TODO (Danil K): Id for testing only.\n  const testId = ObjectId.createFromHexString('605f04bda559b036e051d558')\n  const item = await database.getItemById<KeyStatisticDto>(DB_NAME, KEY_STAT_COLLECTION, testId)\n\n  if (!item) {\n    return null\n  }\n\n  return keyStatisticMapper.fromDto(item)\n}\n\nexport const dashboardAPI = { getKeyStatistic }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { dashboardAPI } from 'src/api/services/DashboardService'\nimport { KeyStatisticModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchKeyStatistic = createAsyncThunk(\n  'dashboard/fetchKeyStatistic',\n  dashboardAPI.getKeyStatistic,\n)\n\n\ninterface TestState {\n  keyStatistic: KeyStatisticModel | null\n}\n\nconst initialState: TestState = { keyStatistic: null }\n\nexport const dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchKeyStatistic.fulfilled, (state, action) => {\n      state.keyStatistic = action.payload\n    }),\n})\n\nexport const selectKeyStatistic = (state: RootState) => state.dashboard.keyStatistic\n","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Welcome = lazy(() => import('./pages/Welcome'))\nconst Counter = lazy(() => import('./components/Counter'))\n\nexport const welcomeRoutes: PartialRouteObject[] = [\n  {\n    path: '/welcome',\n    element: <Welcome />,\n    children: [\n      {\n        path: 'counter',\n        element: <Counter />,\n      },\n    ],\n  },\n]\n","import { PartialRouteObject } from 'react-router'\nimport { Navigate } from 'react-router-dom'\nimport { welcomeRoutes } from 'src/features/welcome/routes'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\n\nexport const RootRouter: PartialRouteObject[] = [\n  ...welcomeRoutes,\n  {\n    path: '/',\n    element: <Navigate to={publicUrlPath('/welcome')} />,\n  },\n  {\n    path: '*',\n    element: <div>404 page</div>,\n  },\n]\n","import { useEffect, useState } from 'react'\nimport { useRoutes } from 'react-router-dom'\n\nimport { database } from './api/services/DatabaseService'\nimport { RootRouter } from './routes'\n\nexport const App: React.FC = () => {\n  const routes = useRoutes(RootRouter, process.env.PUBLIC_URL)\n\n  const [auth, setAuth] = useState(false)\n\n  useEffect(() => {\n    database.login()\n      .then(() => setAuth(true))\n      .catch((error) => console.error('Database connection error', error))\n  }, [])\n\n  return auth ? (\n    <main>\n      {routes}\n    </main>\n  ) : null // TODO: Add loading spinner.\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from 'src/App'\n\nimport { store } from './store'\n\nimport './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Suspense fallback={<div>Загрузка...</div>}>\n          <App />\n        </Suspense>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}