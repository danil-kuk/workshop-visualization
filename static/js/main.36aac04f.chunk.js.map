{"version":3,"sources":["api/services/DatabaseService.ts","api/services/DatabaseConfig.ts","utils/publicUrlPath.ts","components/AppLoadingSpinner/style.module.scss","api/mappers/EventMapper.ts","api/services/EventsService.ts","store/slices/events.ts","store/store.ts","api/mappers/KeyStatistic.mapper.ts","api/services/DashboardService.ts","store/slices/dashboard.ts","components/AppHeader/style.module.scss","components/AppHeader/AppHeader.tsx","components/AppLoadingSpinner/AppLoadingSpinner.tsx","features/welcome/routes.tsx","routes/RootRouter.tsx","App.tsx","index.tsx"],"names":["app","Realm","getMongoDB","mongodb","currentUser","mongoClient","Error","dbName","collectionName","a","limit","collection","db","find","database","login","credentials","apiKey","logIn","getItemById","_id","findOne","getItems","getItemByEventId","event_id","publicUrlPath","path","process","module","exports","eventMapper","dto","id","name","description","DB_NAME","COLLECTION_NAME","items","map","item","eventsAPI","fetchEventsList","createAsyncThunk","eventsSlice","createSlice","initialState","list","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectEventsList","events","store","configureStore","reducer","dashboard","dashboardSlice","useAppDispatch","useDispatch","useAppSelector","useSelector","keyStatisticMapper","studentsCount","students_count","projectsCount","projects_count","teamsCount","teams_count","curatorsCount","curators_count","customersCount","customers_count","KEY_STAT_COLLECTION","eventId","dashboardAPI","getKeyStatistic","fetchKeyStatistic","keyStatistic","selectKeyStatistic","AppHeader","Logo","className","style","logo","title","pack","version","to","AppLoadingSpinner","fullHeight","cls","loading","CircularProgress","color","size","Welcome","lazy","KeyStats","welcomeRoutes","element","children","RootRouter","App","routes","useRoutes","useState","auth","setAuth","useEffect","then","catch","error","console","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.36aac04f.chunk.js","sourcesContent":["import * as Realm from 'realm-web'\nimport { ObjectId } from 'bson'\n\nimport { DatabaseItemBase } from '../dtos/DatabaseItemBase'\n\nimport {\n  APP_ID,\n  MONGO_CLIENT,\n  PUBLIC_API_KEY,\n} from './DatabaseConfig'\n\nconst app = new Realm.App(APP_ID)\n\nfunction getMongoDB() {\n  const mongodb = app.currentUser?.mongoClient(MONGO_CLIENT)\n\n  if (!mongodb) {\n    throw Error('Database connection error! Unable to create MongoDB Client.')\n  }\n\n  return mongodb\n}\n\nfunction login() {\n  const credentials = Realm.Credentials.apiKey(PUBLIC_API_KEY)\n\n  return app.logIn(credentials, false)\n}\n\n/**\n * Get item from selected db and collection by id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param _id Item id.\n */\nfunction getItemById<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  _id: string | ObjectId,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ _id })\n}\n\n/**\n * Get list of items from selected db and collection.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param limit Max items to return.\n */\nasync function getItems<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  limit = 10,\n): Promise<T[]> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  // TODO (Danil K): Add filters support.\n  return collection.find({}, { limit })\n}\n\n/**\n * Get item from selected db and collection by event id.\n * @param dbName Database name.\n * @param collectionName Collection name.\n * @param event_id Event id.\n */\nexport function getItemByEventId<T extends DatabaseItemBase>(\n  dbName: string,\n  collectionName: string,\n  event_id: number,\n): Promise<T | null> {\n  const mongodb = getMongoDB()\n  const collection = mongodb.db(dbName).collection<T>(collectionName)\n\n  return collection.findOne({ event_id })\n}\n\nexport const database = {\n  login,\n  getItemById,\n  getItems,\n  getItemByEventId,\n}\n","export const APP_ID = 'workshop-mongo-qqunb'\n\nexport const PUBLIC_API_KEY = 'A80ekR6X3jZ4vubEuT9oHwVqqBLWRgPCOxQNC4eS63hVG1d31R7wi99wUxNiz5nZ'\n\nexport const MONGO_CLIENT = 'mongodb-atlas'\n","/**\n * This function is workaround for react-router v6 issue: https://github.com/ReactTraining/react-router/issues/7216\n * @param path Path.\n * @returns Modified path with base url.\n */\nexport function publicUrlPath(path: string): string {\n  return process.env.PUBLIC_URL + path\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"style_loading__1qrKv\",\"fullHeight\":\"style_fullHeight__1rlAE\"};","import { EventModel } from 'src/models'\n\nimport { EventDto } from '../dtos/EventDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nexport const eventMapper: DtoToModelMapper<EventModel, EventDto> = {\n  fromDto: (dto) => ({\n    id: dto.id,\n    name: dto.name,\n    description: dto.description,\n  }),\n}\n","import { EventDto } from '../dtos/EventDto'\nimport { eventMapper } from '../mappers/EventMapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'events'\nconst COLLECTION_NAME = 'list'\n\nasync function getEventsList() {\n  const items = await database.getItems<EventDto>(DB_NAME, COLLECTION_NAME)\n\n  return items.map(item => eventMapper.fromDto(item))\n}\n\nexport const eventsAPI = { getEventsList }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { eventsAPI } from 'src/api/services/EventsService'\nimport { EventModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchEventsList = createAsyncThunk(\n  'events/fetchEventsList',\n  eventsAPI.getEventsList,\n)\n\n\ninterface EventsState {\n  list: EventModel[]\n}\n\nconst initialState: EventsState = { list: [] }\n\nexport const eventsSlice = createSlice({\n  name: 'events',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchEventsList.fulfilled, (state, action) => {\n      state.list = action.payload\n    }),\n})\n\nexport const selectEventsList = (state: RootState) => state.events.list\n","import { configureStore } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nimport { dashboardSlice } from './slices/dashboard'\nimport { eventsSlice } from './slices/events'\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardSlice.reducer,\n    events: eventsSlice.reducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { KeyStatisticModel } from 'src/models'\n\nimport { KeyStatisticDto } from '../dtos/KeyStatisticDto'\n\nimport { DtoToModelMapper } from './Mappers'\n\nexport const keyStatisticMapper: DtoToModelMapper<KeyStatisticModel, KeyStatisticDto> = {\n  fromDto: (dto) => ({\n    studentsCount: dto.students_count,\n    projectsCount: dto.projects_count,\n    teamsCount: dto.teams_count,\n    curatorsCount: dto.curators_count,\n    customersCount: dto.customers_count,\n  }),\n}\n","import { KeyStatisticDto } from '../dtos/KeyStatisticDto'\nimport { keyStatisticMapper } from '../mappers/KeyStatistic.mapper'\n\nimport { database } from './DatabaseService'\n\nconst DB_NAME = 'dashboard'\nconst KEY_STAT_COLLECTION = 'keyStatistic'\n\nasync function getKeyStatistic(eventId: number) {\n  const item = await database.getItemByEventId<KeyStatisticDto>(DB_NAME, KEY_STAT_COLLECTION, eventId)\n\n  if (!item) {\n    return null\n  }\n\n  return keyStatisticMapper.fromDto(item)\n}\n\nexport const dashboardAPI = { getKeyStatistic }\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { dashboardAPI } from 'src/api/services/DashboardService'\nimport { KeyStatisticModel } from 'src/models'\n\nimport { RootState } from '../store'\n\nexport const fetchKeyStatistic = createAsyncThunk(\n  'dashboard/fetchKeyStatistic',\n  (eventId: number) => dashboardAPI.getKeyStatistic(eventId),\n)\n\n\ninterface DashboardState {\n  keyStatistic: KeyStatisticModel | null\n}\n\nconst initialState: DashboardState = { keyStatistic: null }\n\nexport const dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {},\n  extraReducers: builder => builder\n    .addCase(fetchKeyStatistic.fulfilled, (state, action) => {\n      state.keyStatistic = action.payload\n    }),\n})\n\nexport const selectKeyStatistic = (state: RootState) => state.dashboard.keyStatistic\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"style_logo__3hEVD\"};","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\nimport pack from '../../../package.json'\n\nimport style from './style.module.scss'\n\nexport const AppHeader: React.FC = () => (\n  <header>\n    <Logo />\n    <h3>\n      Визуализации\n    </h3>\n  </header>\n)\n\nconst Logo: React.FC = () => (\n  <div\n    className={style.logo}\n    title={`Версия системы ${pack.version}`}\n  >\n    <Link to={publicUrlPath('/')} />\n  </div>\n)\n","import React from 'react'\nimport { CircularProgress } from '@material-ui/core'\nimport cls from 'classnames'\n\nimport style from './style.module.scss'\n\ninterface Props {\n  fullHeight?: boolean\n}\n\nexport const AppLoadingSpinner: React.FC<Props> = ({ fullHeight }) => (\n  <div className={cls(style.loading, { [style.fullHeight]: fullHeight })}>\n    <CircularProgress\n      color='primary'\n      style={{ color: 'var(--primary)' }}\n      size={50}\n    />\n  </div>\n)\n","import { lazy } from 'react'\nimport { PartialRouteObject } from 'react-router'\n\nconst Welcome = lazy(() => import('./pages/Welcome'))\nconst KeyStats = lazy(() => import('./components/KeyStatistic'))\n\nexport const welcomeRoutes: PartialRouteObject[] = [\n  {\n    path: 'welcome',\n    element: <Welcome />,\n    children: [\n      {\n        path: 'event/:id',\n        element: <KeyStats />,\n      },\n    ],\n  },\n]\n","import { PartialRouteObject } from 'react-router'\nimport { Navigate } from 'react-router-dom'\nimport { welcomeRoutes } from 'src/features/welcome/routes'\nimport { publicUrlPath } from 'src/utils/publicUrlPath'\n\n\nexport const RootRouter: PartialRouteObject[] = [\n  ...welcomeRoutes,\n  {\n    path: '/',\n    element: <Navigate to={publicUrlPath('/welcome')} />,\n  },\n  {\n    path: '*',\n    element: <div>404 page</div>,\n  },\n]\n","import { useEffect, useState } from 'react'\nimport { useRoutes } from 'react-router-dom'\n\nimport { database } from './api/services/DatabaseService'\nimport { AppHeader } from './components/AppHeader'\nimport { AppLoadingSpinner } from './components/AppLoadingSpinner'\nimport { RootRouter } from './routes'\n\nexport const App: React.FC = () => {\n  const routes = useRoutes(RootRouter, process.env.PUBLIC_URL)\n\n  const [auth, setAuth] = useState(false)\n\n  useEffect(() => {\n    database.login()\n      .then(() => setAuth(true))\n      .catch((error) => console.error('Database connection error', error))\n  }, [])\n\n  if (!auth) {\n    return <AppLoadingSpinner fullHeight />\n  }\n\n  return (\n    <>\n      <AppHeader />\n      <main>\n        {routes}\n      </main>\n    </>\n  )\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from 'src/App'\n\nimport { store } from './store'\n\nimport './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Suspense fallback={<div>Загрузка...</div>}>\n          <App />\n        </Suspense>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}